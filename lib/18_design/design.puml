@startuml

class User {
    + int id
    + String name
    + DateTime registedDate
    + String address
    + String phone
    + DateTime birth
}

class Book {
    + int id
    + String title
    + CheckoutStatus checkoutStatus
    + DateTime publishedData
}

class Checkout {
    + int id
    + int userId
    + int bookId
    + bool isReturned
    + DateTime checkoutDate
    + DateTime returnDate
    + int extensionCount
}

class UserDataSource {
    + List<User> getUsers()
    + User getUser(int id)
    + User createUser(User user)
    + User updateUser(User user)
    + User deleteUser(User user)
}

class BookDataSource {
    + List<Book> getBooks()
    + Book getBook(int id)
    + Book createBook(Book book)
    + Book updateBook(Book book)
    + Book deleteBook(Book book)
}

class CheckoutDataSource {
    + List<Checkout> getCheckouts()
    + Checkout getCheckout(int id)
    + Checkout createCheckout(Checkout checkout)
    + Checkout updateCheckout(Checkout checkout)
}

interface UserRepository {
    + List<User> getUsers()
    + User getUser(int id)
    + User createUser(User user)
    + User updateUser(int targetId, User user)
    + User deleteUser(int id)
    + void cancelDelete()
    + User findByName(String name)
}

interface BookRepository {
    + List<Book> getBooks()
    + List<Book> getBooksCheckoutAble()
    + List<Book> getBooksSortedByRecent()
    + Book getBook(int id)
    + Book createBook(Book book)
    + Book updateBook(int targetId, Book book)
    + Book deleteBook(Book book)
    + void cancelDelete()
    + Book findByName(String name)
}

interface CheckoutRepository {
    + List<Checkout> getSortedByReturnCheckouts()
    + Checkout getCheckout(int id)
    + Checkout createCheckout(Checkout checkout, Book book)
    + Checkout returnBook(int userId, String title)
    + Checkout findByCheckoutId(int id)
    + void extensionCheckout(Book book)
    + List<Book> getBooksCheckoutedByUser(User user)
}

class UserRepositoryImpl implements UserRepository {
    + UserRepositoryImpl(UserDataSource)
}
class BookRepositoryImpl implements BookRepository {
    + BookRepositoryImpl(BookDataSource)
}
class CheckoutRepositoryImpl implements CheckoutRepository {
    + CheckoutRepositoryImpl(CheckoutDataSource, BookDataSource)
}

class LibraryService {
    + LibraryService(FileController fileController, UserRepository userRepository, BookRepository bookRepository, CheckoutRepository checkoutRepository)
    + void initialize()
    + void folderCheck()
}

class UserManage {
    + UserManage(UserRepositoryImpl)
    + void manage()
    + List<User> getUsers()
    + void createUser()
    + (String, String, String, DateTime) inputUserInfo()
    + User findByName()
    + void updateUser()
    + void deleteUser()
    + void cancelDelete()
}
class BookManage {
    + BookManage(BookRepositoryImpl)
    + void manage()
    + List<Book> getBooks()
    + List<Book> getBooksBySortedRecent()
    + void createBook()
    + Book findByName()
    + void updateBook()
    + void deleteBook()
    + void cancelDelete()
}

class CheckoutManage {
    + CheckoutManage(_userRepositoryImpl, BookRepositoryImpl, CheckoutRepositoryImpl)
    + void manage()
    + List<Checkout> getCheckouts()
    + void createCheckout()
    + void returnBook()
    + void extension()
    + User inputUser()
    + Book inputBook()
}

UserRepositoryImpl --> UserRepository
BookRepositoryImpl --> BookRepository
CheckoutRepositoryImpl --> CheckoutRepository
UserManage --> UserRepositoryImpl
BookManage --> BookRepositoryImpl
CheckoutManage --> UserRepositoryImpl
CheckoutManage --> BookRepositoryImpl
CheckoutManage --> CheckoutRepositoryImpl
LibraryService --> FileController
LibraryService --> UserRepository
LibraryService --> BookRepository
LibraryService --> CheckoutRepository

@enduml